Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\n\r\nfrom flask import Flask, request, send_from_directory, jsonify\r\nfrom werkzeug.security import generate_password_hash\r\n\r\nfrom data_py import db_session\r\nfrom data_py.users import User\r\n\r\napp = Flask(__name__)\r\n\r\nUSERS_REGISTERING_NOW = {}\r\n\r\n\r\n@app.route('/login')\r\ndef login_page():\r\n    with open(\"front/login/index.html\") as f:\r\n        return f.read()\r\n\r\n\r\n@app.route('/registration')\r\ndef registration_page():\r\n    with open(\"front/registration/index.html\") as f:\r\n        return f.read()\r\n\r\n\r\n@app.route('/')\r\ndef main_page():\r\n    with open(\"front/main/index.html\") as f:\r\n        return f.read()\r\n\r\n\r\n@app.route('/request/<path:path>')\r\ndef check_registration(path):  # эта функция для обработки запросов от js'а\r\n    print(f'request from \"{path}\"')\r\n    print(f'arguments: {request.args}')\r\n    if path == \"registration/check_email\":  # ->->->\r\n        a_email = request.args.get(\"email\")\r\n        db_sess = db_session.create_session()\r\n        email_is_free = not db_sess.query(User).filter(User.email == a_email).first()  # email свободен?\r\n        print(\"email is free: \" + email_is_free)\r\n        return jsonify(email_is_free)  # <-<-<-\r\n\r\n    if path == \"registration/check_username\":  # ->->->\r\n        a_username = request.args.get(\"username\")\r\n        db_sess = db_session.create_session()\r\n        username_is_free = not db_sess.query(User).filter(User.username == a_username).first()  # username свободен?\r\n        print(\"username is free: \" + username_is_free)\r\n        return jsonify(username_is_free)  # <-<-<-\r\n\r\n    if path == \"registration/send_email\":  # пользователь запрашивает код подтверждения\r\n        a_email = request.args.get(\"email\")\r\n        a_username = request.args.get(\"username\")\r\n        # тут надо ещё раз проверить, что всё ок (нет пользователей с такой почтой и username),\r\n        db_sess = db_session.create_session()\r\n        is_ok = not db_sess.query(User).filter(User.username == a_username).first() and not db_sess.query(User).filter(\r\n            User.email == a_email).first() and \"@\" not in a_username  # всё ок?\r\n        print(is_ok)\r\n        if is_ok:\r\n            code = random.randint(100000, 999999)  # код подтверждения\r\n            # отправить письмо по почте с кодом подтверждения.\r\n            # пока не отправляем, а просто выводим в консоль\r\n            print(f\"{a_email}: код подтверждения отпрален на почту ({code})\")\r\n            USERS_REGISTERING_NOW[a_email] = (code, a_username)\r\n        return {\"response\": is_ok}\r\n\r\n    if path == \"registration/check_code\":  # от пользователя получены данные для регистрации\r\n        a_email = request.args.get(\"email\")\r\n        a_code = request.args.get(\"code\")\r\n\r\n        # тут надо проверить, что код верный,\r\n        is_success = False  # всё ок?\r\n        if a_email in USERS_REGISTERING_NOW:\r\n            is_success = int(USERS_REGISTERING_NOW[a_email][0]) == int(a_code)\r\n            print(\"code is valid - \" + str(is_success))\r\n            if is_success:\r\n                a_username = USERS_REGISTERING_NOW[a_email][1]\r\n                del USERS_REGISTERING_NOW[a_email]\r\n                a_name = request.args.get(\"name\")\r\n                a_password = request.args.get(\"password\")\r\n                # если код верный, то внести пользовотеля в БД\r\n                db_sess = db_session.create_session()\r\n                user = User(name=a_name,\r\n                            username=a_username,\r\n                            email=a_email)\r\n                user.set_password(a_password)\r\n                db_sess.add(user)\r\n                db_sess.commit()\r\n                print('user register')\r\n        return {\"response\": is_success}\r\n\r\n    if path == \"login\":  # от пользователя получены данные для входа\r\n        a_email_username = request.args.get(\"email-username\")\r\n        a_password = request.args.get(\"password\")\r\n        db_sess = db_session.create_session()\r\n        user = db_sess.query(User).filter(a_email_username == User.email).first()\r\n        if user is None: user = db_sess.query(User).filter(a_email_username == User.username).first()\r\n        is_ok = user and user.check_password(\r\n            a_password)  # проверка, существует ли пользователь с такой почтой и паролем\r\n        if is_ok is None: is_ok = False\r\n        print(is_ok)\r\n        return {\"response\": is_ok}\r\n    return {\"response\": False}\r\n\r\n\r\n@app.route('/front/<path:filename>')\r\ndef get_file_in_front(filename):\r\n    if True:\r\n        print(request.remote_addr + \" запросил \" + filename)\r\n        return send_from_directory('front', filename)\r\n    else:\r\n        print(request.remote_addr + \" запросил \" + filename + \" - ОТКАЗАНО!\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    db_session.global_init('db/chat.db')\r\n    print(\"окно регистрации тут - http://127.0.0.1:8080/registration\")\r\n    print(\"окно входа тут - http://127.0.0.1:8080/login\")\r\n    app.run(port=8080, host='127.0.0.1')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.py b/server.py
--- a/server.py	(revision 48875a30d04482e3cb41bd2a4527c44032566cd5)
+++ b/server.py	(date 1711220362087)
@@ -112,7 +112,7 @@
 
 
 if __name__ == '__main__':
-    db_session.global_init('db/chat.db')
+    db_session.global_init('db/messenger.db')
     print("окно регистрации тут - http://127.0.0.1:8080/registration")
     print("окно входа тут - http://127.0.0.1:8080/login")
     app.run(port=8080, host='127.0.0.1')
